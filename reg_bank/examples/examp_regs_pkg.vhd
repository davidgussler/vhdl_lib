-- #############################################################################
-- #  << examp_regs Package >>
-- # ===========================================================================
-- # File             : examp_regs_pkg.vhd
-- # Language         : VHDL '08
-- # Generator Author : David Gussler
-- #
-- # Generated by reggie v0.1.0 on July 12, 2023 at 11:05 am est
-- #
-- # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-- # !! Warning - This is generated file. Do not edit. !! 
-- # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-- #
-- # ===========================================================================
-- # Description of this example register map
-- # This is the long description for this register map. As you can clearly see, 
-- # this verbose description is much more wordy than the regular description, 
-- # and it is allowed to span many lines. It is optional to add this, but 
-- # highly recommended.
-- #############################################################################

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.gen_utils_pkg.all;

package examp_regs_pkg is
    -- -------------------------------------------------------------------------
    -- Generics
    -- -------------------------------------------------------------------------
    constant EXAMP_REGS_NUM_REGS : positive := 5;
    constant EXAMP_REGS_ADDR_BITS : positive := 8;
    constant EXAMP_REGS_ADDRS : slv_array_t(EXAMP_REGS_NUM_REGS-1 downto 0)(EXAMP_REGS_ADDR_BITS-1 downto 0) := (
        0 => X"00",
        1 => X"04",
        2 => X"08",
        3 => X"0C",
        4 => X"68"
    ); 
    constant EXAMP_REGS_RST_VALS : slv_array_t(EXAMP_REGS_NUM_REGS-1 downto 0)(31 downto 0) := (
        0 => X"0000_0A00",
        1 => X"0000_0000",
        2 => X"0000_0000",
        3 => X"0000_0000",
        4 => X"0023_ABCD"
    );

    -- -------------------------------------------------------------------------
    -- Register Fields
    -- -------------------------------------------------------------------------
    -- My first control register 
    -- Offset: 0x00
    -- Access: RW
    type examp_regs_reg0_fld_t is record 
        fld0 : std_logic; -- Desc
        fld1 : std_logic_vector(3 downto 0); -- Desc
    end record;

    -- My first array of control registers
    -- Access: RW
    -- Offset: 0x04 to 0x04+4*1
    type examp_regs_reg1_arr_fld_t is record
        fld0 : std_logic_vector(1 downto 0); -- Desc
        fld1 : std_logic_vector(7 downto 0); -- Desc
    end record;
    type examp_regs_reg1_arr_fld_array_t is array (natural range 0 to 1) of examp_regs_reg1_arr_fld_t;

    -- My first status register 
    -- Access: RO
    -- Offset: 0x0C
    type examp_regs_reg2_fld_t is record 
        fld0 : std_logic_vector(31 downto 0); -- Desc
    end record;

    -- My first volitile register 
    -- Access: RWV
    -- Offset: 0x68
    type examp_regs_reg3_fld_t is record 
        fld0 : std_logic_vector(23 downto 0); -- Desc
    end record;

    -- -------------------------------------------------------------------------
    -- IO Records
    -- -------------------------------------------------------------------------
    type examp_regs_ctl_t is record
        reg0 : examp_regs_reg0_fld_t; 
        reg1_arr : examp_regs_reg1_arr_fld_array_t;
        reg3 : examp_regs_reg3_fld_t; 
    end record;

    type examp_regs_sts_t is record
        reg2 : examp_regs_reg2_fld_t; 
        reg3 : examp_regs_reg3_fld_t; 
    end record;

    type examp_regs_rd_t is record 
        reg0 : std_logic; 
        reg1_arr : std_logic_vector(1 downto 0); 
        reg2 : std_logic; 
        reg3 : std_logic;
    end record; 

    type examp_regs_wr_t is record 
        reg0 : std_logic; 
        reg1_arr : std_logic_vector(1 downto 0);
        reg3 : std_logic;
    end record; 

end package;
